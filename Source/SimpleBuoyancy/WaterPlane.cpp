// Fill out your copyright notice in the Description page of Project Settings.


#include "WaterPlane.h"
#include <ProceduralMeshComponent.h>
#include <Math/UnrealMathUtility.h>
#include <Math/UnrealMathVectorCommon.h>
#include <Kismet/GameplayStatics.h>
#include <fstream>
#include "VarGetter.h"


// Sets default values
AWaterPlane::AWaterPlane()
{

	PrimaryActorTick.bCanEverTick = true;
	InitAllComponent();
	InitAllVariables();

	InitRemainingVariables();

	

	RunConsScript();

	BindOverlapTriggers();
}

void AWaterPlane::InitAllVariables() noexcept(true)
{

	WaterPlaneLocation = FVector(0, 0, 0);
	WaterDensity = 1.5f;
	Gravity = 980.f;
	NormalAngularDamping = 0.2f;
	NormalLinearDamping = 0.1f;
	WaterAngularDamping = 1.f;
	WaterLinearDamping = 1.f;
	WaterVolumeGizmo = FVector(2158.552246, 2186.72876, -440.0);
	MeshverticalOffset = 10.f;
	NumVerticesX = 25;
	NumVerticesY = 25;
	VertexColor = FColor(1.0, 0.489286, 0.235527, 1.0);
	WaterMaterial = []() {FStringAssetReference mat(TEXT("MaterialInstanceConstant'/Game/Assets/WaterPlane/Translucent/Materials/M_toonyWater_Inst1.M_toonyWater_Inst1'")); return (UMaterialInterface*)mat.TryLoad(); }();
	//temp
    Triangles = { 0,1,25,1,26,25,1,2,26,2,27,26,2,3,27,3,28,27,3,4,28,4,29,28,4,5,29,5,30,29,5,6,30,6,31,30,6,7,31,7,32,31,7,8,32,8,33,32,8,9,33,9,34,33,9,10,34,10,35,34,10,11,35,11,36,35,11,12,36,12,37,36,12,13,37,13,38,37,13,14,38,14,39,38,14,15,39,15,40,39,15,16,40,16,41,40,16,17,41,17,42,41,17,18,42,18,43,42,18,19,43,19,44,43,19,20,44,20,45,44,20,21,45,21,46,45,21,22,46,22,47,46,22,23,47,23,48,47,23,24,48,24,49,48,25,26,50,26,51,50,26,27,51,27,52,51,27,28,52,28,53,52,28,29,53,29,54,53,29,30,54,30,55,54,30,31,55,31,56,55,31,32,56,32,57,56,32,33,57,33,58,57,33,34,58,34,59,58,34,35,59,35,60,59,35,36,60,36,61,60,36,37,61,37,62,61,37,38,62,38,63,62,38,39,63,39,64,63,39,40,64,40,65,64,40,41,65,41,66,65,41,42,66,42,67,66,42,43,67,43,68,67,43,44,68,44,69,68,44,45,69,45,70,69,45,46,70,46,71,70,46,47,71,47,72,71,47,48,72,48,73,72,48,49,73,49,74,73,50,51,75,51,76,75,51,52,76,52,77,76,52,53,77,53,78,77,53,54,78,54,79,78,54,55,79,55,80,79,55,56,80,56,81,80,56,57,81,57,82,81,57,58,82,58,83,82,58,59,83,59,84,83,59,60,84,60,85,84,60,61,85,61,86,85,61,62,86,62,87,86,62,63,87,63,88,87,63,64,88,64,89,88,64,65,89,65,90,89,65,66,90,66,91,90,66,67,91,67,92,91,67,68,92,68,93,92,68,69,93,69,94,93,69,70,94,70,95,94,70,71,95,71,96,95,71,72,96,72,97,96,72,73,97,73,98,97,73,74,98,74,99,98,75,76,100,76,101,100,76,77,101,77,102,101,77,78,102,78,103,102,78,79,103,79,104,103,79,80,104,80,105,104,80,81,105,81,106,105,81,82,106,82,107,106,82,83,107,83,108,107,83,84,108,84,109,108,84,85,109,85,110,109,85,86,110,86,111,110,86,87,111,87,112,111,87,88,112,88,113,112,88,89,113,89,114,113,89,90,114,90,115,114,90,91,115,91,116,115,91,92,116,92,117,116,92,93,117,93,118,117,93,94,118,94,119,118,94,95,119,95,120,119,95,96,120,96,121,120,96,97,121,97,122,121,97,98,122,98,123,122,98,99,123,99,124,123,100,101,125,101,126,125,101,102,126,102,127,126,102,103,127,103,128,127,103,104,128,104,129,128,104,105,129,105,130,129,105,106,130,106,131,130,106,107,131,107,132,131,107,108,132,108,133,132,108,109,133,109,134,133,109,110,134,110,135,134,110,111,135,111,136,135,111,112,136,112,137,136,112,113,137,113,138,137,113,114,138,114,139,138,114,115,139,115,140,139,115,116,140,116,141,140,116,117,141,117,142,141,117,118,142,118,143,142,118,119,143,119,144,143,119,120,144,120,145,144,120,121,145,121,146,145,121,122,146,122,147,146,122,123,147,123,148,147,123,124,148,124,149,148,125,126,150,126,151,150,126,127,151,127,152,151,127,128,152,128,153,152,128,129,153,129,154,153,129,130,154,130,155,154,130,131,155,131,156,155,131,132,156,132,157,156,132,133,157,133,158,157,133,134,158,134,159,158,134,135,159,135,160,159,135,136,160,136,161,160,136,137,161,137,162,161,137,138,162,138,163,162,138,139,163,139,164,163,139,140,164,140,165,164,140,141,165,141,166,165,141,142,166,142,167,166,142,143,167,143,168,167,143,144,168,144,169,168,144,145,169,145,170,169,145,146,170,146,171,170,146,147,171,147,172,171,147,148,172,148,173,172,148,149,173,149,174,173,150,151,175,151,176,175,151,152,176,152,177,176,152,153,177,153,178,177,153,154,178,154,179,178,154,155,179,155,180,179,155,156,180,156,181,180,156,157,181,157,182,181,157,158,182,158,183,182,158,159,183,159,184,183,159,160,184,160,185,184,160,161,185,161,186,185,161,162,186,162,187,186,162,163,187,163,188,187,163,164,188,164,189,188,164,165,189,165,190,189,165,166,190,166,191,190,166,167,191,167,192,191,167,168,192,168,193,192,168,169,193,169,194,193,169,170,194,170,195,194,170,171,195,171,196,195,171,172,196,172,197,196,172,173,197,173,198,197,173,174,198,174,199,198,175,176,200,176,201,200,176,177,201,177,202,201,177,178,202,178,203,202,178,179,203,179,204,203,179,180,204,180,205,204,180,181,205,181,206,205,181,182,206,182,207,206,182,183,207,183,208,207,183,184,208,184,209,208,184,185,209,185,210,209,185,186,210,186,211,210,186,187,211,187,212,211,187,188,212,188,213,212,188,189,213,189,214,213,189,190,214,190,215,214,190,191,215,191,216,215,191,192,216,192,217,216,192,193,217,193,218,217,193,194,218,194,219,218,194,195,219,195,220,219,195,196,220,196,221,220,196,197,221,197,222,221,197,198,222,198,223,222,198,199,223,199,224,223,200,201,225,201,226,225,201,202,226,202,227,226,202,203,227,203,228,227,203,204,228,204,229,228,204,205,229,205,230,229,205,206,230,206,231,230,206,207,231,207,232,231,207,208,232,208,233,232,208,209,233,209,234,233,209,210,234,210,235,234,210,211,235,211,236,235,211,212,236,212,237,236,212,213,237,213,238,237,213,214,238,214,239,238,214,215,239,215,240,239,215,216,240,216,241,240,216,217,241,217,242,241,217,218,242,218,243,242,218,219,243,219,244,243,219,220,244,220,245,244,220,221,245,221,246,245,221,222,246,222,247,246,222,223,247,223,248,247,223,224,248,224,249,248,225,226,250,226,251,250,226,227,251,227,252,251,227,228,252,228,253,252,228,229,253,229,254,253,229,230,254,230,255,254,230,231,255,231,256,255,231,232,256,232,257,256,232,233,257,233,258,257,233,234,258,234,259,258,234,235,259,235,260,259,235,236,260,236,261,260,236,237,261,237,262,261,237,238,262,238,263,262,238,239,263,239,264,263,239,240,264,240,265,264,240,241,265,241,266,265,241,242,266,242,267,266,242,243,267,243,268,267,243,244,268,244,269,268,244,245,269,245,270,269,245,246,270,246,271,270,246,247,271,247,272,271,247,248,272,248,273,272,248,249,273,249,274,273,250,251,275,251,276,275,251,252,276,252,277,276,252,253,277,253,278,277,253,254,278,254,279,278,254,255,279,255,280,279,255,256,280,256,281,280,256,257,281,257,282,281,257,258,282,258,283,282,258,259,283,259,284,283,259,260,284,260,285,284,260,261,285,261,286,285,261,262,286,262,287,286,262,263,287,263,288,287,263,264,288,264,289,288,264,265,289,265,290,289,265,266,290,266,291,290,266,267,291,267,292,291,267,268,292,268,293,292,268,269,293,269,294,293,269,270,294,270,295,294,270,271,295,271,296,295,271,272,296,272,297,296,272,273,297,273,298,297,273,274,298,274,299,298,275,276,300,276,301,300,276,277,301,277,302,301,277,278,302,278,303,302,278,279,303,279,304,303,279,280,304,280,305,304,280,281,305,281,306,305,281,282,306,282,307,306,282,283,307,283,308,307,283,284,308,284,309,308,284,285,309,285,310,309,285,286,310,286,311,310,286,287,311,287,312,311,287,288,312,288,313,312,288,289,313,289,314,313,289,290,314,290,315,314,290,291,315,291,316,315,291,292,316,292,317,316,292,293,317,293,318,317,293,294,318,294,319,318,294,295,319,295,320,319,295,296,320,296,321,320,296,297,321,297,322,321,297,298,322,298,323,322,298,299,323,299,324,323,300,301,325,301,326,325,301,302,326,302,327,326,302,303,327,303,328,327,303,304,328,304,329,328,304,305,329,305,330,329,305,306,330,306,331,330,306,307,331,307,332,331,307,308,332,308,333,332,308,309,333,309,334,333,309,310,334,310,335,334,310,311,335,311,336,335,311,312,336,312,337,336,312,313,337,313,338,337,313,314,338,314,339,338,314,315,339,315,340,339,315,316,340,316,341,340,316,317,341,317,342,341,317,318,342,318,343,342,318,319,343,319,344,343,319,320,344,320,345,344,320,321,345,321,346,345,321,322,346,322,347,346,322,323,347,323,348,347,323,324,348,324,349,348,325,326,350,326,351,350,326,327,351,327,352,351,327,328,352,328,353,352,328,329,353,329,354,353,329,330,354,330,355,354,330,331,355,331,356,355,331,332,356,332,357,356,332,333,357,333,358,357,333,334,358,334,359,358,334,335,359,335,360,359,335,336,360,336,361,360,336,337,361,337,362,361,337,338,362,338,363,362,338,339,363,339,364,363,339,340,364,340,365,364,340,341,365,341,366,365,341,342,366,342,367,366,342,343,367,343,368,367,343,344,368,344,369,368,344,345,369,345,370,369,345,346,370,346,371,370,346,347,371,347,372,371,347,348,372,348,373,372,348,349,373,349,374,373,350,351,375,351,376,375,351,352,376,352,377,376,352,353,377,353,378,377,353,354,378,354,379,378,354,355,379,355,380,379,355,356,380,356,381,380,356,357,381,357,382,381,357,358,382,358,383,382,358,359,383,359,384,383,359,360,384,360,385,384,360,361,385,361,386,385,361,362,386,362,387,386,362,363,387,363,388,387,363,364,388,364,389,388,364,365,389,365,390,389,365,366,390,366,391,390,366,367,391,367,392,391,367,368,392,368,393,392,368,369,393,369,394,393,369,370,394,370,395,394,370,371,395,371,396,395,371,372,396,372,397,396,372,373,397,373,398,397,373,374,398,374,399,398,375,376,400,376,401,400,376,377,401,377,402,401,377,378,402,378,403,402,378,379,403,379,404,403,379,380,404,380,405,404,380,381,405,381,406,405,381,382,406,382,407,406,382,383,407,383,408,407,383,384,408,384,409,408,384,385,409,385,410,409,385,386,410,386,411,410,386,387,411,387,412,411,387,388,412,388,413,412,388,389,413,389,414,413,389,390,414,390,415,414,390,391,415,391,416,415,391,392,416,392,417,416,392,393,417,393,418,417,393,394,418,394,419,418,394,395,419,395,420,419,395,396,420,396,421,420,396,397,421,397,422,421,397,398,422,398,423,422,398,399,423,399,424,423,400,401,425,401,426,425,401,402,426,402,427,426,402,403,427,403,428,427,403,404,428,404,429,428,404,405,429,405,430,429,405,406,430,406,431,430,406,407,431,407,432,431,407,408,432,408,433,432,408,409,433,409,434,433,409,410,434,410,435,434,410,411,435,411,436,435,411,412,436,412,437,436,412,413,437,413,438,437,413,414,438,414,439,438,414,415,439,415,440,439,415,416,440,416,441,440,416,417,441,417,442,441,417,418,442,418,443,442,418,419,443,419,444,443,419,420,444,420,445,444,420,421,445,421,446,445,421,422,446,422,447,446,422,423,447,423,448,447,423,424,448,424,449,448,425,426,450,426,451,450,426,427,451,427,452,451,427,428,452,428,453,452,428,429,453,429,454,453,429,430,454,430,455,454,430,431,455,431,456,455,431,432,456,432,457,456,432,433,457,433,458,457,433,434,458,434,459,458,434,435,459,435,460,459,435,436,460,436,461,460,436,437,461,437,462,461,437,438,462,438,463,462,438,439,463,439,464,463,439,440,464,440,465,464,440,441,465,441,466,465,441,442,466,442,467,466,442,443,467,443,468,467,443,444,468,444,469,468,444,445,469,445,470,469,445,446,470,446,471,470,446,447,471,447,472,471,447,448,472,448,473,472,448,449,473,449,474,473,450,451,475,451,476,475,451,452,476,452,477,476,452,453,477,453,478,477,453,454,478,454,479,478,454,455,479,455,480,479,455,456,480,456,481,480,456,457,481,457,482,481,457,458,482,458,483,482,458,459,483,459,484,483,459,460,484,460,485,484,460,461,485,461,486,485,461,462,486,462,487,486,462,463,487,463,488,487,463,464,488,464,489,488,464,465,489,465,490,489,465,466,490,466,491,490,466,467,491,467,492,491,467,468,492,468,493,492,468,469,493,469,494,493,469,470,494,470,495,494,470,471,495,471,496,495,471,472,496,472,497,496,472,473,497,473,498,497,473,474,498,474,499,498,475,476,500,476,501,500,476,477,501,477,502,501,477,478,502,478,503,502,478,479,503,479,504,503,479,480,504,480,505,504,480,481,505,481,506,505,481,482,506,482,507,506,482,483,507,483,508,507,483,484,508,484,509,508,484,485,509,485,510,509,485,486,510,486,511,510,486,487,511,487,512,511,487,488,512,488,513,512,488,489,513,489,514,513,489,490,514,490,515,514,490,491,515,491,516,515,491,492,516,492,517,516,492,493,517,493,518,517,493,494,518,494,519,518,494,495,519,495,520,519,495,496,520,496,521,520,496,497,521,497,522,521,497,498,522,498,523,522,498,499,523,499,524,523,500,501,525,501,526,525,501,502,526,502,527,526,502,503,527,503,528,527,503,504,528,504,529,528,504,505,529,505,530,529,505,506,530,506,531,530,506,507,531,507,532,531,507,508,532,508,533,532,508,509,533,509,534,533,509,510,534,510,535,534,510,511,535,511,536,535,511,512,536,512,537,536,512,513,537,513,538,537,513,514,538,514,539,538,514,515,539,515,540,539,515,516,540,516,541,540,516,517,541,517,542,541,517,518,542,518,543,542,518,519,543,519,544,543,519,520,544,520,545,544,520,521,545,521,546,545,521,522,546,522,547,546,522,523,547,523,548,547,523,524,548,524,549,548,525,526,550,526,551,550,526,527,551,527,552,551,527,528,552,528,553,552,528,529,553,529,554,553,529,530,554,530,555,554,530,531,555,531,556,555,531,532,556,532,557,556,532,533,557,533,558,557,533,534,558,534,559,558,534,535,559,535,560,559,535,536,560,536,561,560,536,537,561,537,562,561,537,538,562,538,563,562,538,539,563,539,564,563,539,540,564,540,565,564,540,541,565,541,566,565,541,542,566,542,567,566,542,543,567,543,568,567,543,544,568,544,569,568,544,545,569,545,570,569,545,546,570,546,571,570,546,547,571,547,572,571,547,548,572,548,573,572,548,549,573,549,574,573,550,551,575,551,576,575,551,552,576,552,577,576,552,553,577,553,578,577,553,554,578,554,579,578,554,555,579,555,580,579,555,556,580,556,581,580,556,557,581,557,582,581,557,558,582,558,583,582,558,559,583,559,584,583,559,560,584,560,585,584,560,561,585,561,586,585,561,562,586,562,587,586,562,563,587,563,588,587,563,564,588,564,589,588,564,565,589,565,590,589,565,566,590,566,591,590,566,567,591,567,592,591,567,568,592,568,593,592,568,569,593,569,594,593,569,570,594,570,595,594,570,571,595,571,596,595,571,572,596,572,597,596,572,573,597,573,598,597,573,574,598,574,599,598,575,576,600,576,601,600,576,577,601,577,602,601,577,578,602,578,603,602,578,579,603,579,604,603,579,580,604,580,605,604,580,581,605,581,606,605,581,582,606,582,607,606,582,583,607,583,608,607,583,584,608,584,609,608,584,585,609,585,610,609,585,586,610,586,611,610,586,587,611,587,612,611,587,588,612,588,613,612,588,589,613,589,614,613,589,590,614,590,615,614,590,591,615,591,616,615,591,592,616,592,617,616,592,593,617,593,618,617,593,594,618,594,619,618,594,595,619,595,620,619,595,596,620,596,621,620,596,597,621,597,622,621,597,598,622,598,623,622,598,599,623,599,624,623 };
	PrimitivesList = {};
	
	x = 0;
	y = 0;

}

void AWaterPlane::InitRemainingVariables()
{
	if (this && this->GetWorld() && IsValidLowLevel())
	{

		if (AActor* p_VarGetters = UGameplayStatics::GetActorOfClass(this, AVarGetter::StaticClass()))
		{
			if (AVarGetter* p_VVarGetter = reinterpret_cast<AVarGetter*>(p_VarGetters))
			{
				this->Vertices = p_VVarGetter->Verticesxx;
				this->UV0 = p_VVarGetter->UV0xx;
				this->Normals = p_VVarGetter->Normalsxx;
				this->Tangents = p_VVarGetter->Tangentsxx;
				this->VertexColors = p_VVarGetter->VertexColorsxx;
            }
     	}
		
	

	}
}

void AWaterPlane::InitAllComponent()
{
	p_DefaultSceneRoot = CreateDefaultSubobject<USceneComponent>(TEXT("DefaultScene"));
	RootComponent = p_DefaultSceneRoot;

	p_WaterProceduralMesh = CreateDefaultSubobject<UProceduralMeshComponent>(TEXT("WaterProceduralMesh"));
	RootComponent = p_DefaultSceneRoot;

	p_WaterBoxTrigger = CreateDefaultSubobject<UBoxComponent>(TEXT("WaterBoxTrigger"));
	RootComponent = p_DefaultSceneRoot;


     //attaching to root
	p_WaterProceduralMesh->AttachTo(this->GetRootComponent());
	p_WaterBoxTrigger->AttachTo(this->GetRootComponent());
}

void AWaterPlane::C_First_Sequence()
{
	//
	

	float xxW =UKismetMathLibrary::Max(WaterVolumeGizmo.X,100.f);
	float yyW=UKismetMathLibrary::Max(WaterVolumeGizmo.Y, 100.f);
	float zzW=UKismetMathLibrary::Min(WaterVolumeGizmo.Z, -100.f);


	FVector watergizmo = FVector(xxW, yyW, zzW);

	this->WaterVolumeGizmo = watergizmo;
	//c1_2
	FVector watergizmotwo = WaterVolumeGizmo / 2.f;
	
	FVector watergizmoo = FVector(UKismetMathLibrary::Abs(watergizmotwo.X), UKismetMathLibrary::Abs(watergizmotwo.Y), UKismetMathLibrary::Abs(watergizmotwo.Z));
	this->p_WaterBoxTrigger->SetBoxExtent(watergizmoo,true);
	

	this->p_WaterBoxTrigger->SetRelativeLocation(WaterVolumeGizmo /  2.f);


	//reseting procedural mesh location

	this->Vertices.Reset(0);
	this->Triangles.Reset(0);
	this->UV0.Reset(0);
	this->Normals.Reset(0);
	this->VertexColors.Reset(0);
	this->Tangents.Reset(0);

	// third sequence 

	//1
	for (int ixx = 0; (ixx <= this->NumVerticesX - 1); ixx++)
	{
		this->x = ixx;


		for (int isssi = 0; isssi <= (this->NumVerticesY - 1); isssi++)
		{
			this->y = isssi;


			//x
			float xd = (float)this->x;
			float cxget = 24.0f;
			float dget = xd / cxget;
			//y
			float yd = (float)this->y;
			float  cyget = 24.0f;
			float ygget = yd / cyget;

		

			float xfinal = (dget*this->WaterVolumeGizmo.X);
			float yfinal = (ygget*this->WaterVolumeGizmo.Y);
			float meshverticaloffset = (this->MeshverticalOffset * -1.0f);
			FVector Verticesitoadd = FVector(xfinal, yfinal, meshverticaloffset);


			this->Vertices.Add(Verticesitoadd);
			this->UV0.Add(FVector2D(dget,ygget));
			this->VertexColors.Add(this->VertexColor);
			

			
			
		
		}

	}

	//fourth sequence 
	UKismetProceduralMeshLibrary::CreateGridMeshTriangles(NumVerticesX, NumVerticesY, false, this->Triangles);

	UKismetProceduralMeshLibrary::CalculateTangentsForMesh(this->Vertices, this->Triangles, this->UV0, this->Normals, this->Tangents);

	//fifth sequence  

	if (this->p_WaterProceduralMesh)
	{
		
		p_WaterProceduralMesh->CreateMeshSection(0, this->Vertices, this->Triangles, this->Normals, this->UV0, this->VertexColors, this->Tangents, false);
		p_WaterProceduralMesh->SetMaterial(0, this->WaterMaterial);


		
			
		
	}
}


void AWaterPlane::RunConsScript()
{
	if (this&&this->GetWorld())
	{
		this->C_First_Sequence();
	
	}//
}



void AWaterPlane::test(float tt)
{
	std::ofstream mm("C:/Users/WAQAS/Desktop/pr data/sc.txt", std::ios::app | std::ios::out);
     mm << tt << std::endl;
}

void AWaterPlane::OnOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
{
	UPrimitiveComponent* p_OtherComponent = OtherComp;

	if (p_OtherComponent != nullptr)
	{
		if (p_OtherComponent->IsSimulatingPhysics())
		{
			this->PrimitivesList.AddUnique(p_OtherComponent);
			p_OtherComponent->SetLinearDamping(this->WaterLinearDamping);
			p_OtherComponent->SetAngularDamping(this->WaterAngularDamping);
		}
	}
}

void AWaterPlane::OnOverlapEnd(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	UPrimitiveComponent* p_otherComponent = OtherComp;
	if (this->PrimitivesList.Contains(p_otherComponent))
	{
		this->PrimitivesList.Remove(p_otherComponent);
		p_otherComponent->SetLinearDamping(this->NormalLinearDamping);
		p_otherComponent->SetAngularDamping(this->NormalAngularDamping);
	}


}

void AWaterPlane::BindOverlapTriggers()
{
	if (this && this->GetWorld())
	{
		if (this->p_WaterBoxTrigger != nullptr)
		{
			p_WaterBoxTrigger->OnComponentBeginOverlap.AddDynamic(this, &AWaterPlane::OnOverlapBegin);
			p_WaterBoxTrigger->OnComponentEndOverlap.AddDynamic(this, &AWaterPlane::OnOverlapEnd);
		}
	}
}

void AWaterPlane::InitialDetectionHackOnBeginPlay()
{
	TArray<UPrimitiveComponent*> OutPrimitiveComponent = {};
	this->p_WaterBoxTrigger->GetOverlappingComponents(OutPrimitiveComponent);

	for (auto& ref : OutPrimitiveComponent)
	{
		if (ref != nullptr)
		{
			if (ref->IsSimulatingPhysics())
			{
				this->PrimitivesList.AddUnique(ref);
				ref->SetLinearDamping(this->WaterLinearDamping);
				ref->SetAngularDamping(this->WaterAngularDamping);
			}
		}
	}
}

void AWaterPlane::RunEventTick()
{
	this->WaterPlaneLocation = this->GetActorLocation();
	if ( this->PrimitivesList.Num() > 0)
	{
		for (auto & ref : this->PrimitivesList)
		{
			bool IsValidref = ref->IsValidLowLevel();
			if (IsValidref)
			{
				FVector ori;
				FVector Exte;
				float spradi;
				UKismetSystemLibrary::GetComponentBounds(ref, ori, Exte, spradi);
				
				float subb = this->WaterPlaneLocation.Z - (ori.Z - spradi);

				float dvdd = subb / (spradi * 2.f);

				float cfloat =UKismetMathLibrary::FClamp(dvdd, 0.f, 1.f);

				float finalfloatvalue = cfloat * ref->GetMass() * this->Gravity * this->WaterDensity;
				FVector forceforlocation = FVector(0.f, 0.f, finalfloatvalue);
				// done for location, let's do for force


				float origzmiuns = ori.Z - spradi;

				float origizplus = ori.Z + spradi;
				
				float divideoer= (origzmiuns + this->WaterPlaneLocation.Z) / 2.f;

				FVector truevector = FVector(ori.X, ori.Y, divideoer);

				FVector truevectororfalse = (origizplus > this->WaterPlaneLocation.Z) ? truevector : ori;

				ref->AddForceAtLocation(forceforlocation, truevectororfalse);


			}
		}
	}
}

// Called when the game starts or when spawned
void AWaterPlane::BeginPlay()
{
	Super::BeginPlay();
	InitialDetectionHackOnBeginPlay();


}

// Called every frame
void AWaterPlane::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

	this->RunEventTick();
}

